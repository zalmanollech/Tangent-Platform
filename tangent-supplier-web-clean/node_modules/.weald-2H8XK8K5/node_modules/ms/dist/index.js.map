{"version":3,"file":"index.js","names":["value: StringValue | number","options?: Options","str: string","value: StringValue","ms: number","ms","msAbs: number","n: number","name: string"],"sources":["../src/index.ts"],"sourcesContent":["const s = 1000;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nconst w = d * 7;\nconst y = d * 365.25;\nconst mo = y / 12;\n\ntype Years = 'years' | 'year' | 'yrs' | 'yr' | 'y';\ntype Months = 'months' | 'month' | 'mo';\ntype Weeks = 'weeks' | 'week' | 'w';\ntype Days = 'days' | 'day' | 'd';\ntype Hours = 'hours' | 'hour' | 'hrs' | 'hr' | 'h';\ntype Minutes = 'minutes' | 'minute' | 'mins' | 'min' | 'm';\ntype Seconds = 'seconds' | 'second' | 'secs' | 'sec' | 's';\ntype Milliseconds = 'milliseconds' | 'millisecond' | 'msecs' | 'msec' | 'ms';\ntype Unit =\n  | Years\n  | Months\n  | Weeks\n  | Days\n  | Hours\n  | Minutes\n  | Seconds\n  | Milliseconds;\n\ntype UnitAnyCase = Capitalize<Unit> | Uppercase<Unit> | Unit;\n\nexport type StringValue =\n  | `${number}`\n  | `${number}${UnitAnyCase}`\n  | `${number} ${UnitAnyCase}`;\n\ninterface Options {\n  /**\n   * Set to `true` to use verbose formatting. Defaults to `false`.\n   */\n  long?: boolean;\n}\n\n/**\n * Parse or format the given value.\n *\n * @param value - The string or number to convert\n * @param options - Options for the conversion\n * @throws Error if `value` is not a non-empty string or a number\n */\nexport function ms(value: StringValue, options?: Options): number;\nexport function ms(value: number, options?: Options): string;\nexport function ms(\n  value: StringValue | number,\n  options?: Options,\n): number | string {\n  if (typeof value === 'string') {\n    return parse(value);\n  } else if (typeof value === 'number') {\n    return format(value, options);\n  }\n  throw new Error(\n    `Value provided to ms() must be a string or number. value=${JSON.stringify(value)}`,\n  );\n}\n\nexport default ms;\n\n/**\n * Parse the given string and return milliseconds.\n *\n * @param str - A string to parse to milliseconds\n * @returns The parsed value in milliseconds, or `NaN` if the string can't be\n * parsed\n */\nexport function parse(str: string): number {\n  if (typeof str !== 'string' || str.length === 0 || str.length > 100) {\n    throw new Error(\n      `Value provided to ms.parse() must be a string with length between 1 and 99. value=${JSON.stringify(str)}`,\n    );\n  }\n  const match =\n    /^(?<value>-?\\d*\\.?\\d+) *(?<unit>milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|months?|mo|years?|yrs?|y)?$/i.exec(\n      str,\n    );\n\n  if (!match?.groups) {\n    return NaN;\n  }\n\n  // Named capture groups need to be manually typed today.\n  // https://github.com/microsoft/TypeScript/issues/32098\n  const { value, unit = 'ms' } = match.groups as {\n    value: string;\n    unit: string | undefined;\n  };\n\n  const n = parseFloat(value);\n\n  const matchUnit = unit.toLowerCase() as Lowercase<Unit>;\n\n  /* istanbul ignore next - istanbul doesn't understand, but thankfully the TypeScript the exhaustiveness check in the default case keeps us type safe here */\n  switch (matchUnit) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'months':\n    case 'month':\n    case 'mo':\n      return n * mo;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      matchUnit satisfies never;\n      throw new Error(\n        `Unknown unit \"${matchUnit}\" provided to ms.parse(). value=${JSON.stringify(str)}`,\n      );\n  }\n}\n\n/**\n * Parse the given StringValue and return milliseconds.\n *\n * @param value - A typesafe StringValue to parse to milliseconds\n * @returns The parsed value in milliseconds, or `NaN` if the string can't be\n * parsed\n */\nexport function parseStrict(value: StringValue): number {\n  return parse(value);\n}\n\n/**\n * Short format for `ms`.\n */\nfunction fmtShort(ms: number): StringValue {\n  const msAbs = Math.abs(ms);\n  if (msAbs >= y) {\n    return `${Math.round(ms / y)}y`;\n  }\n  if (msAbs >= mo) {\n    return `${Math.round(ms / mo)}mo`;\n  }\n  if (msAbs >= w) {\n    return `${Math.round(ms / w)}w`;\n  }\n  if (msAbs >= d) {\n    return `${Math.round(ms / d)}d`;\n  }\n  if (msAbs >= h) {\n    return `${Math.round(ms / h)}h`;\n  }\n  if (msAbs >= m) {\n    return `${Math.round(ms / m)}m`;\n  }\n  if (msAbs >= s) {\n    return `${Math.round(ms / s)}s`;\n  }\n  return `${ms}ms`;\n}\n\n/**\n * Long format for `ms`.\n */\nfunction fmtLong(ms: number): StringValue {\n  const msAbs = Math.abs(ms);\n  if (msAbs >= y) {\n    return plural(ms, msAbs, y, 'year');\n  }\n  if (msAbs >= mo) {\n    return plural(ms, msAbs, mo, 'month');\n  }\n  if (msAbs >= w) {\n    return plural(ms, msAbs, w, 'week');\n  }\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return `${ms} ms`;\n}\n\n/**\n * Format the given integer as a string.\n *\n * @param ms - milliseconds\n * @param options - Options for the conversion\n * @returns The formatted string\n */\nexport function format(ms: number, options?: Options): string {\n  if (typeof ms !== 'number' || !Number.isFinite(ms)) {\n    throw new Error('Value provided to ms.format() must be of type number.');\n  }\n\n  return options?.long ? fmtLong(ms) : fmtShort(ms);\n}\n\n/**\n * Pluralization helper.\n */\nfunction plural(\n  ms: number,\n  msAbs: number,\n  n: number,\n  name: string,\n): StringValue {\n  const isPlural = msAbs >= n * 1.5;\n  return `${Math.round(ms / n)} ${name}${isPlural ? 's' : ''}` as StringValue;\n}\n"],"mappings":"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"}